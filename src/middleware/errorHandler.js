const fs = require('fs');
const path = require('path');

// ÏóêÎü¨ Î°úÍπÖ Ìï®Ïàò
const logError = (error, context = '') => {
  const timestamp = new Date().toISOString();
  const logDir = path.join(__dirname, '../../logs');
  
  // Î°úÍ∑∏ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
  if (!fs.existsSync(logDir)) {
    fs.mkdirSync(logDir, { recursive: true });
  }
  
  const logFile = path.join(logDir, 'application-error.log');
  const logEntry = `[${timestamp}] ${context}: ${error.stack || error.message}\n`;
  
  try {
    fs.appendFileSync(logFile, logEntry);
  } catch (logError) {
    console.error('Î°úÍ∑∏ ÌååÏùº Ïì∞Í∏∞ Ïã§Ìå®:', logError);
  }
};

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏóêÎü¨ Ìï∏Îì§Îü¨
const handleDatabaseError = (error) => {
  console.error('Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏóêÎü¨:', error);
  logError(error, 'DATABASE_ERROR');
  
  // Ïó∞Í≤∞ ÏóêÎü¨Ïù∏ Í≤ΩÏö∞ Ïû¨ÏãúÎèÑ Î°úÏßÅ
  if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {
    console.log('üîÑ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ïã§Ìå®. Ïû¨ÏãúÎèÑ Ï§ë...');
    return {
      success: false,
      message: 'Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
      code: 'DB_CONNECTION_ERROR'
    };
  }
  
  // Ï§ëÎ≥µ ÌÇ§ ÏóêÎü¨
  if (error.code === 'ER_DUP_ENTRY') {
    return {
      success: false,
      message: 'Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî Îç∞Ïù¥ÌÑ∞ÏûÖÎãàÎã§.',
      code: 'DUPLICATE_ENTRY'
    };
  }
  
  // Ïô∏Îûò ÌÇ§ Ï†úÏïΩ Ï°∞Í±¥ ÏóêÎü¨
  if (error.code === 'ER_NO_REFERENCED_ROW_2') {
    return {
      success: false,
      message: 'Ï∞∏Ï°∞ÌïòÎäî Îç∞Ïù¥ÌÑ∞Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.',
      code: 'FOREIGN_KEY_ERROR'
    };
  }
  
  // ÏùºÎ∞òÏ†ÅÏù∏ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏóêÎü¨
  return {
    success: false,
    message: 'Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏûëÏóÖ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
    code: 'DATABASE_ERROR'
  };
};

// Ïù∏Ï¶ù ÏóêÎü¨ Ìï∏Îì§Îü¨
const handleAuthError = (error) => {
  console.error('Ïù∏Ï¶ù ÏóêÎü¨:', error);
  logError(error, 'AUTH_ERROR');
  
  if (error.name === 'JsonWebTokenError') {
    return {
      success: false,
      message: 'Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÌÜ†ÌÅ∞ÏûÖÎãàÎã§.',
      code: 'INVALID_TOKEN'
    };
  }
  
  if (error.name === 'TokenExpiredError') {
    return {
      success: false,
      message: 'ÌÜ†ÌÅ∞Ïù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§.',
      code: 'TOKEN_EXPIRED'
    };
  }
  
  return {
    success: false,
    message: 'Ïù∏Ï¶ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.',
    code: 'AUTH_ERROR'
  };
};

// Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ ÏóêÎü¨ Ìï∏Îì§Îü¨
const handleValidationError = (error) => {
  console.error('Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ ÏóêÎü¨:', error);
  logError(error, 'VALIDATION_ERROR');
  
  if (error.isJoi) {
    const details = error.details.map(detail => detail.message).join(', ');
    return {
      success: false,
      message: `ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§: ${details}`,
      code: 'VALIDATION_ERROR'
    };
  }
  
  return {
    success: false,
    message: 'ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞Í∞Ä Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.',
    code: 'VALIDATION_ERROR'
  };
};

// ÌååÏùº ÏóÖÎ°úÎìú ÏóêÎü¨ Ìï∏Îì§Îü¨
const handleFileError = (error) => {
  console.error('ÌååÏùº ÏóêÎü¨:', error);
  logError(error, 'FILE_ERROR');
  
  if (error.code === 'LIMIT_FILE_SIZE') {
    return {
      success: false,
      message: 'ÌååÏùº ÌÅ¨Í∏∞Í∞Ä ÎÑàÎ¨¥ ÌÅΩÎãàÎã§.',
      code: 'FILE_TOO_LARGE'
    };
  }
  
  if (error.code === 'LIMIT_UNEXPECTED_FILE') {
    return {
      success: false,
      message: 'ÏòàÏÉÅÏπò Î™ªÌïú ÌååÏùºÏù¥ ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§.',
      code: 'UNEXPECTED_FILE'
    };
  }
  
  return {
    success: false,
    message: 'ÌååÏùº Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
    code: 'FILE_ERROR'
  };
};

// ÎÑ§Ìä∏ÏõåÌÅ¨ ÏóêÎü¨ Ìï∏Îì§Îü¨
const handleNetworkError = (error) => {
  console.error('ÎÑ§Ìä∏ÏõåÌÅ¨ ÏóêÎü¨:', error);
  logError(error, 'NETWORK_ERROR');
  
  if (error.code === 'ECONNRESET') {
    return {
      success: false,
      message: 'Ïó∞Í≤∞Ïù¥ Ïû¨ÏÑ§Ï†ïÎêòÏóàÏäµÎãàÎã§.',
      code: 'CONNECTION_RESET'
    };
  }
  
  if (error.code === 'ETIMEDOUT') {
    return {
      success: false,
      message: 'Ïó∞Í≤∞ ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§.',
      code: 'CONNECTION_TIMEOUT'
    };
  }
  
  return {
    success: false,
    message: 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
    code: 'NETWORK_ERROR'
  };
};

// ÏóêÎü¨ ÌÉÄÏûÖÎ≥Ñ Ìï∏Îì§Îü¨ Îß§Ìïë
const errorHandlers = {
  'ER_DUP_ENTRY': handleDatabaseError,
  'ER_NO_REFERENCED_ROW_2': handleDatabaseError,
  'ECONNREFUSED': handleDatabaseError,
  'ENOTFOUND': handleDatabaseError,
  'JsonWebTokenError': handleAuthError,
  'TokenExpiredError': handleAuthError,
  'ValidationError': handleValidationError,
  'LIMIT_FILE_SIZE': handleFileError,
  'LIMIT_UNEXPECTED_FILE': handleFileError,
  'ECONNRESET': handleNetworkError,
  'ETIMEDOUT': handleNetworkError
};

// Î©îÏù∏ ÏóêÎü¨ Ìï∏Îì§Îü¨
const handleError = (error) => {
  // ÏóêÎü¨ ÌÉÄÏûÖ ÌôïÏù∏
  const errorType = error.code || error.name || 'UNKNOWN';
  const handler = errorHandlers[errorType];
  
  if (handler) {
    return handler(error);
  }
  
  // Í∏∞Î≥∏ ÏóêÎü¨ Ï≤òÎ¶¨
  console.error('Ïïå Ïàò ÏóÜÎäî ÏóêÎü¨:', error);
  logError(error, 'UNKNOWN_ERROR');
  
  return {
    success: false,
    message: 'ÏÑúÎ≤Ñ ÎÇ¥Î∂Ä Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
    code: 'INTERNAL_ERROR'
  };
};

// Express ÎØ∏Îì§Ïõ®Ïñ¥Ïö© ÏóêÎü¨ Ìï∏Îì§Îü¨
const expressErrorHandler = (error, req, res, next) => {
  const errorResponse = handleError(error);
  
  // HTTP ÏÉÅÌÉú ÏΩîÎìú ÏÑ§Ï†ï
  let statusCode = 500;
  if (errorResponse.code === 'VALIDATION_ERROR') {
    statusCode = 400;
  } else if (errorResponse.code === 'AUTH_ERROR' || errorResponse.code === 'INVALID_TOKEN' || errorResponse.code === 'TOKEN_EXPIRED') {
    statusCode = 401;
  } else if (errorResponse.code === 'DUPLICATE_ENTRY' || errorResponse.code === 'FOREIGN_KEY_ERROR') {
    statusCode = 409;
  } else if (errorResponse.code === 'FILE_TOO_LARGE' || errorResponse.code === 'UNEXPECTED_FILE') {
    statusCode = 413;
  }
  
  res.status(statusCode).json({
    ...errorResponse,
    ...(process.env.NODE_ENV === 'development' && { 
      stack: error.stack,
      originalError: error.message 
    })
  });
};

module.exports = {
  handleError,
  expressErrorHandler,
  logError,
  handleDatabaseError,
  handleAuthError,
  handleValidationError,
  handleFileError,
  handleNetworkError
};
